#!/usr/bin/env python3
# 
# EPITECH PROJECT, 2020
# 208dowels_2019
# File description:
# 208dowels
# 


import sys
import math

dist_tt = [
    [0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
    [0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
    [0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.35],
    [0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
    [0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.33, 15.01],
    [0.70, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
    [1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
    [1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
    [2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.63, 21.67],
    [2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]
]

fit_psb = ["P>99%", "90%<P<99%", "80%<P<90%", "70%<P<80%", "60%<P<70%", "50%<P<60%", "40%<P<50%", "30%<P<40%", "20%<P<30%", "10%<P<20%", "5%<P<10%", "2%<P<5%", "1%<P<2%", "P<1%"]

def check_for_err():
    halp = open("help", "r")

    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print(halp.read(), end = '')
        sys.exit(0)
    if len(sys.argv) < 2:
        print("Flag error. Try -h for more informations.")
        sys.exit(84)
    flag = []
    for i in range(1, len(sys.argv)):
        try:
            flag.append(int(sys.argv[i]))
        except ValueError:
            print("Flag error. Try -h for more informations.")
            sys.exit(84)
        if (float(sys.argv[i]) <= 0):
            sys.exit(84)
    if (sum(flag) != 100):
        sys.exit(84)
    return flag

def display(res):
    tt = res["Tx"].pop()
    print("\tx", "\t|\t".join(map('-'.join, [map(str, _) for _ in res["x"]])) + '+', "total", sep="\t|\t")
    print("\tOx", "\t|\t".join(map(str, res["Ox"])), "%d" % sum(res["Ox"]), sep="\t|\t")
    print("\tTx", "\t|\t".join(map(str, res["Tx"])), "%.d" % tt, sep="\t|\t")
    print("Distribution:\t\tB(100, %.4f)"% res["dist"])
    print("Chi-squared:\t\t%.3f" % res["chi_qu"])
    print("Degrees of freedom:\t%d" % res["deg"])
    print("Fit validity:\t\t%s" % res["fit_val"])

def calc_Tx(val, res):
    tmp = []
    Tx = []
    offset_left = 0
    offset_right = 0
    while val[0] < 10:
        val[0] = val[0] + val[1]
        val.remove(val[1])
        offset_left += 1
    val.reverse()
    while val[0] < 10:
        val[0] = val[0] + val[1]
        val.remove(val[1])
        offset_right += 1
    for i in range(8):
        tmp.append((math.factorial(100) / (math.factorial(i) * math.factorial(100 - i))) * 100 * pow(1 - res["dist"], 100 - i) * pow(res["dist"], i))
    tmp.append(100 - sum(i for i in tmp))
    Tx.append(sum(tmp[:offset_left + 1]))
    Tx += (i for i in tmp[offset_left + 1:])
    Tx = Tx[:len(Tx) - 1 - offset_right]
    Tx.append(sum(i for i in tmp[(len(tmp) - 1 - offset_right):]))
    for i in range(len(Tx)):
        if i == 0:
            res["Tx"].append(Tx[i])
            Tx.pop(0)
        elif len(res["x"][i]) > 1:
            res["Tx"].append(sum(Tx[0:len(res["x"][i])]))
            for j in range(len(res["x"][i])):
                Tx.pop(0)
        else:
            res["Tx"].append(Tx[0])
            Tx.pop(0)

def format(res):
    res["x"][0][1] = res["x"][1][0]
    res["x"].pop(1)
    res["Ox"][0] += res["Ox"][1]
    res["Ox"].pop(1)


def calc(val):
    res = {"x": [[]], "Ox": [0], "Tx": [], "dist": 0.0, "chi_qu": 0.0, "deg": 0, "fit_val": "P < 1%"}
    for i, c in enumerate(val):
        if c >= 10 or (res["Ox"][-1] >= 10 and i != len(val) - 1 and res["Ox"][-1] + c >= val[i + 1] + c):
            res["x"].append([])
            res["Ox"].append(0)
        res["x"][-1].append(i)
        res["Ox"][-1] += c
    res["x"][-1] = [res["x"][-1][0]]
    res["dist"] = sum([i * val[i] for i in range(len(val))]) / pow(10, 4)
    calc_Tx(val, res)
    while len(res["Tx"]) != len(res["x"]):
        format(res)
    res["deg"] = len(res["x"]) - 2
    res["chi_qu"] = sum(pow(res["Ox"][i] - res["Tx"][i], 2) / res["Tx"][i] for i in range(len(res["Tx"])))
    for i, c in enumerate(dist_tt[res["deg"] - 1]):
        if res["chi_qu"] < c:
            res["fit_val"] = fit_psb[i]
            break
    res["Tx"].append(sum(res["Tx"]))
    for i in range(len(res["Tx"])):
        res["Tx"][i] = round(res["Tx"][i], 1)
    display(res)

def main():
    x = check_for_err()

    calc(x)

if __name__ == "__main__":
    main()
